<?php

use App\Model\Product;
use App\Model\Product\Meal;
use App\Model\Restaurant;
use App\Model\Taxonomy;
use Illuminate\Database\Seeder;

class TaxonomiesSeeder extends Seeder
{
    protected $dishes = [];

    /** @var $restaurant Restaurant */
    protected $restaurant;

    public function setRestaurant(): void
    {
        $this->restaurant = Restaurant::where('domain', 'demo')->first();
        if (!$this->restaurant instanceof Restaurant) {
            throw new InvalidArgumentException('Restaurant not was found');
        }
    }

    private function createDish(
        string $name,
        int $type,
        array $tags,
        string $image
    ) :array {
        return [
            'product' => [
                'name' => $name,
                'image_path' => "/uploads/{$image}",
                'description' => "Autogenerated description for {$name} product.",
                'price' => 0.0,
                'type' => $type,
                'restaurant_id' => $this->restaurant->id
            ],
            'tags' => $tags,
        ];
    }

    private function attachTaxonomyToProduct(
        Product $product,
        string $type,
        string $name
    ): void {
        $taxonomy = Taxonomy::where('type', $type)
            ->where('name', $name)
            ->first();

        if (!$taxonomy instanceof Taxonomy) {
            $taxonomy = Taxonomy::create([
                'name' => $name,
                'type' => $type,
                'description' => "Description for taxonomy name: {$name}, type: {$type}",
                'restaurant_id' => $this->restaurant->id
            ]);
        }

        $product->tags()->attach($taxonomy->id);
    }

    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        $this->setRestaurant();
        $this->loadDishes();
        $this->loadSidesAndDesserts();
    }

    public function loadDishes(): void
    {
        $products = [
            $this->createDish('Bandeja paisa', Meal::TYPE_MEAL, ['Comida Colombiana', 'Lunes', 'Beef'], '1.jpg'),
            $this->createDish('Chuleta valluna', Meal::TYPE_MEAL, ['Comida Colombiana', 'Martes'], '2.jpg'),
            $this->createDish('Ajiaco', Meal::TYPE_MEAL, ['Comida Colombiana', 'Miercoles', 'Chicken', 'Soup'], '3.jpg'),
            $this->createDish('Lomo salteado', Meal::TYPE_MEAL, ['Comida Peruana', 'Jueves' ], '4.jpg'),
            $this->createDish('Pollo a la brasa', Meal::TYPE_MEAL, ['Comida Chilena', 'Viernes', 'Chicken'], '5.jpg'),
            $this->createDish('Tacos al pastor', Meal::TYPE_MEAL, ['Comida Mexicana', 'Sabado', 'Spicy'], '6.jpg'),
            $this->createDish('Enchiladas', Meal::TYPE_MEAL, ['Comida Mexicana', 'Domingo', 'Spicy'], '7.jpg'),
        ];

        foreach ($products as $productData) {
            $product = Product::create($productData['product']);

            foreach ($productData['tags'] as $tag) {
                $this->attachTaxonomyToProduct($product, 'tag', $tag);
            }
        }
    }

    public function loadSidesAndDesserts(): void
    {
        $products = [
            $this->createDish('Mango Juicy', Product\Beverage::TYPE_BEVERAGE, ['juice'], '1.jpg'),
            $this->createDish('Pineapple juice', Product\Beverage::TYPE_BEVERAGE, ['juice'],'1.jpg'),
            $this->createDish('Guava juice', Product\Beverage::TYPE_BEVERAGE, ['juice'],'1.jpg'),
            $this->createDish('Soda', Product\Beverage::TYPE_BEVERAGE, ['soda'],'1.jpg'),
            $this->createDish('White rice', Product\Side::TYPE_SIDE, ['meals'],'1.jpg'),
            $this->createDish('French fries', Product\Side::TYPE_SIDE, ['meals'],'1.jpg'),
            $this->createDish('Rice milk', Product\Side::TYPE_SIDE, ['dessert'],'1.jpg'),
            $this->createDish('Banana split', Product\Side::TYPE_SIDE, ['dessert'],'1.jpg'),
        ];

        foreach ($products as $productData) {
            $product = Product::create($productData['product']);

            foreach ($productData['tags'] as $tag) {
                $this->attachTaxonomyToProduct($product, 'tag', $tag);
            }
        }
    }

}
